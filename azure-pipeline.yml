trigger:
- master
- new-feature-branch

pool:
  name: 'Default'
  demands:
  - agent.name -equals popo

variables:
  pathToProjectFile: '$(System.DefaultWorkingDirectory)/HelloWorldApp/HelloWorldApp.csproj'
  buildConfiguration: 'Release'
  sonarQubeProjectKey: 'HelloWorld'
  emailRecipients: 'yohaycasoy@gmail.com'

steps:
- checkout: self
  persistCredentials: true

- script: |
    git checkout new-feature-branch || git checkout -b new-feature-branch
    git push origin new-feature-branch
    echo "Build Source Branch: $BUILD_SOURCEBRANCH"
    echo "Expected Branch: refs/heads/new-feature-branch"
    CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
    echo "##vso[task.setvariable variable=currentBranch]$CURRENT_BRANCH"
  displayName: 'Create New Branch'

- task: SonarQubePrepare@6
  inputs:
    SonarQube: 'sonar'
    scannerMode: 'MSBuild'
    projectKey: '$(sonarQubeProjectKey)'
  condition: and(succeeded(), eq(variables['currentBranch'], 'new-feature-branch'))
  displayName: 'Prepare SonarQube Analysis'

- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    projects: '**/*.csproj'
  condition: and(succeeded(), eq(variables['currentBranch'], 'new-feature-branch'))
  displayName: 'Restore NuGet Packages'

- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration) --verbosity detailed'
  condition: and(succeeded(), eq(variables['currentBranch'], 'new-feature-branch'))
  displayName: 'Build Project'

- script: |
    # Check the commit message to determine the version bump
    commit_message=$(git log -1 --pretty=%B)
    bump_type=$(bash commit_message_regex.sh "$commit_message")

    # Fetch the current version from the project file
    current_version=$(grep -oP '(?<=<Version>).*?(?=</Version>)' $(pathToProjectFile))

    # Use the bump type to increment the version
    new_version=$(python3 increment_version.py "$current_version" "$bump_type")

    # Set the new version as a pipeline variable
    echo "##vso[task.setvariable variable=NewVersion]$new_version"
  displayName: 'Determine and Increment Version'
  condition: and(succeeded(), eq(variables['currentBranch'], 'new-feature-branch'))

- task: SonarQubeAnalyze@6
  condition: and(succeeded(), eq(variables['currentBranch'], 'new-feature-branch'))
  displayName: 'Run SonarQube Analysis'

- task: SonarQubePublish@6
  inputs:
    pollingTimeoutSec: '300'
  condition: and(succeeded(), eq(variables['currentBranch'], 'new-feature-branch'))
  displayName: 'Publish Quality Gate Result'

- task: DotNetCoreCLI@2
  inputs:
    command: 'pack'
    packagesToPush: '$(System.DefaultWorkingDirectory)/HelloWorldApp/bin/$(buildConfiguration)/*.nupkg'
    versioningScheme: 'byEnvVar'
    versionEnvVar: 'NewVersion'
  condition: and(succeeded(), eq(variables['currentBranch'], 'new-feature-branch'))
  displayName: 'Create NuGet Package'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(System.DefaultWorkingDirectory)/HelloWorldApp/bin/$(buildConfiguration)'
    ArtifactName: '$(Build.SourceBranchName)_$(Build.BuildId)'
  condition: and(succeeded(), eq(variables['currentBranch'], 'new-feature-branch'))
  displayName: 'Publish Artifact'

- script: |
    echo "Artifact: $(Build.SourceBranchName)_$(Build.BuildId)"
  condition: and(succeeded(), eq(variables['currentBranch'], 'new-feature-branch'))
  displayName: 'Print Artifact Name'

- script: |
    git checkout master
    echo "$(NewVersion)" > version.txt
    git add version.txt
    git commit -m "Changed file version"
    git push origin master
    git push origin new-feature-branch

  condition: and(succeeded(), eq(variables['currentBranch'], 'new-feature-branch'))
  displayName: 'Commit new version'

