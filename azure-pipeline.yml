trigger:
- master

pool:
  name: 'Default'
  demands:
  - agent.name -equals popo

variables:
  pathToProjectFile: '$(System.DefaultWorkingDirectory)/HelloWorldApp/HelloWorldApp.csproj'
  major: 1
  minor: 0
  patch: $[counter(variables['major'], 0)]
  build: $(Build.BuildId)

steps:
- checkout: self
  persistCredentials: true
- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

- script: |
    commit_message=$(git log -1 --pretty=%B)
    version_bump=$(bash commit_message_regex.sh "$commit_message")
    if [[ $version_bump == "Error: No matching pattern" ]]; then
        echo "##vso[task.logissue type=error]$version_bump"
        exit 1
    fi
    echo "##vso[task.setvariable variable=VersionBump]$version_bump"
  displayName: 'Determine Version Bump'

- script: |
    VERSION=$(cat version.txt)
    NEW_VERSION=$(python3 increment_version.py $VERSION $(VersionBump))
    echo $NEW_VERSION > version.txt
    git checkout master  
    git add version.txt
    git commit -m "Increment version to $NEW_VERSION"
    git push origin master  # Change this to 'main' if your default branch is 'main'
    echo "##vso[task.setvariable variable=NewVersion]$NEW_VERSION"
  displayName: 'Increment Version'

- script: |
    echo "$(NewVersion)"
    sed -i 's/<Version>.*<\/Version>/<Version>$(NewVersion)<\/Version>/' $(pathToProjectFile)
  displayName: 'Set App Version'

- script: cat $(pathToProjectFile)
  displayName: 'Display App Version'



- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration $(BuildConfiguration) --verbosity detailed /p:Version=$(NewVersion) '
  displayName: 'Build'

- task: DotNetCoreCLI@2
  inputs:
    command: 'publish'
    projects: '**/*.csproj'
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory) --verbosity detailed /p:Version=$(NewVersion)'
    publishWebProjects: false
  displayName: 'Publish'
  
- script: ls && ls HelloWorldApp
  displayName: list files
- task: NuGetCommand@2
  inputs:
    command: 'push'
    packagesToPush: '$(System.DefaultWorkingDirectory)/HelloWorldApp/*.nupkg'
    publishVstsFeed: 'yohaikoremoxxDD'
    versioningScheme: byEnvVar
    versionEnvVar: NewVersion
  displayName: 'Nuget push'

- script: echo Build and publish completed successfully.
  displayName: 'Confirmation Message'
