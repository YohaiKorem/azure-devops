trigger:
- master

pool:
  name: 'Default'
  demands:
  - agent.name -equals popo

variables:
  pathToProjectFile: '$(System.DefaultWorkingDirectory)/HelloWorldApp/HelloWorldApp.csproj'
  major: 1
  minor: 0
  patch: $[counter(variables['major'], 0)]
  build: $(Build.BuildId)
  buildConfiguration: 'Release'
  sonarQubeProjectKey: 'HelloWorld'
  emailRecipients: 'yohaycasoy@gmail.com'

steps:
- checkout: self
  persistCredentials: true

- script: |
    commit_message=$(git log -1 --pretty=%B)
    version_bump=$(bash commit_message_regex.sh "$commit_message")
    if [[ $version_bump == "Error: No matching pattern" ]]; then
        echo "##vso[task.logissue type=error]$version_bump"
        exit 1
    fi
    echo "##vso[task.setvariable variable=VersionBump]$version_bump"
  displayName: 'Determine Version Bump'

- script: |
    VERSION=$(cat version.txt)
    NEW_VERSION=$(python3 increment_version.py $VERSION $(VersionBump))
    echo $NEW_VERSION > version.txt
    git checkout master  
    git add version.txt
    git commit -m "Increment version to $NEW_VERSION"
    git push origin master  # Change this to 'main' if your default branch is 'main'
    echo "##vso[task.setvariable variable=NewVersion]$NEW_VERSION"
  displayName: 'Increment Version'

- script: |
    echo "$(NewVersion)"
    sed -i 's/<Version>.*<\/Version>/<Version>$(NewVersion)<\/Version>/' $(pathToProjectFile)
  displayName: 'Set App Version'

- script: cat $(pathToProjectFile)
  displayName: 'Display App Version'

- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

- task: SonarQubePrepare@5
  inputs:
    SonarQube: 'sonar'  
    scannerMode: 'MSBuild'
    configMode: 'manual'
    projectKey: $(sonarQubeProjectKey)
    projectName: 'HelloWorldApp'
    projectVersion: $(NewVersion)
  displayName: 'Prepare SonarQube Analysis'

- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration) --verbosity detailed /p:Version=$(NewVersion)'
  displayName: 'Build'

- task: SonarQubeAnalyze@5
  displayName: 'Run SonarQube Analysis'

- task: SonarQubePublish@5
  inputs:
    pollingTimeoutSec: '300'
  displayName: 'Publish Quality Gate Result'

- task: DotNetCoreCLI@2
  inputs:
    command: 'pack'
    packagesToPush: '$(System.DefaultWorkingDirectory)/HelloWorldApp/bin/$(buildConfiguration)/*.nupkg'
    versioningScheme: 'byEnvVar'
    versionEnvVar: 'NewVersion'
  displayName: 'Create NuGet Package'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(System.DefaultWorkingDirectory)/HelloWorldApp/bin/$(buildConfiguration)'
    ArtifactName: '$(Build.SourceBranchName)_$(NewVersion)'
  displayName: 'Publish Artifact'

- script: |
    echo "Artifact: $(Build.SourceBranchName)_$(NewVersion)"
  displayName: 'Print Artifact Name'

- task: SendEmail@1
  inputs:
    to: 'your_email@example.com'
    subject: 'Pipeline Status'
    body: |
      Pipeline completed with status: $(Build.Status)
      Version: $(NewVersion)
    isHtml: false
  displayName: 'Send Email Notification'